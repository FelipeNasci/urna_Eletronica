// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/26/2018 08:04:16"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    urna
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module urna_vlg_sample_tst(
	LCD_DATA,
	clock,
	finalizar,
	key0,
	key1,
	key2,
	reset,
	sampler_tx
);
input [7:0] LCD_DATA;
input  clock;
input  finalizar;
input  key0;
input  key1;
input  key2;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(LCD_DATA or clock or finalizar or key0 or key1 or key2 or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module urna_vlg_check_tst (
	HEX0,
	LCD_BLON,
	LCD_DATA,
	LCD_EN,
	LCD_ON,
	LCD_RS,
	LCD_RW,
	display1,
	display2,
	teste2,
	testeEstado,
	sampler_rx
);
input [6:0] HEX0;
input  LCD_BLON;
input [7:0] LCD_DATA;
input  LCD_EN;
input  LCD_ON;
input  LCD_RS;
input  LCD_RW;
input [6:0] display1;
input [6:0] display2;
input [2:0] teste2;
input [2:0] testeEstado;
input sampler_rx;

reg [6:0] HEX0_expected;
reg  LCD_BLON_expected;
reg [7:0] LCD_DATA_expected;
reg  LCD_EN_expected;
reg  LCD_ON_expected;
reg  LCD_RS_expected;
reg  LCD_RW_expected;
reg [6:0] display1_expected;
reg [6:0] display2_expected;
reg [2:0] teste2_expected;
reg [2:0] testeEstado_expected;

reg [6:0] HEX0_prev;
reg  LCD_BLON_prev;
reg [7:0] LCD_DATA_prev;
reg  LCD_EN_prev;
reg  LCD_ON_prev;
reg  LCD_RS_prev;
reg  LCD_RW_prev;
reg [6:0] display1_prev;
reg [6:0] display2_prev;
reg [2:0] teste2_prev;
reg [2:0] testeEstado_prev;

reg [2:0] teste2_expected_prev;
reg [2:0] testeEstado_expected_prev;

reg [2:0] last_teste2_exp;
reg [2:0] last_testeEstado_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:11] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 11'b1;
end

// update real /o prevs

always @(trigger)
begin
	HEX0_prev = HEX0;
	LCD_BLON_prev = LCD_BLON;
	LCD_DATA_prev = LCD_DATA;
	LCD_EN_prev = LCD_EN;
	LCD_ON_prev = LCD_ON;
	LCD_RS_prev = LCD_RS;
	LCD_RW_prev = LCD_RW;
	display1_prev = display1;
	display2_prev = display2;
	teste2_prev = teste2;
	testeEstado_prev = testeEstado;
end

// update expected /o prevs

always @(trigger)
begin
	teste2_expected_prev = teste2_expected;
	testeEstado_expected_prev = testeEstado_expected;
end


// expected teste2[ 2 ]
initial
begin
	teste2_expected[2] = 1'bX;
end 
// expected teste2[ 1 ]
initial
begin
	teste2_expected[1] = 1'bX;
end 
// expected teste2[ 0 ]
initial
begin
	teste2_expected[0] = 1'bX;
end 
// expected testeEstado[ 2 ]
initial
begin
	testeEstado_expected[2] = 1'bX;
end 
// expected testeEstado[ 1 ]
initial
begin
	testeEstado_expected[1] = 1'bX;
end 
// expected testeEstado[ 0 ]
initial
begin
	testeEstado_expected[0] = 1'bX;
end 
// generate trigger
always @(HEX0_expected or HEX0 or LCD_BLON_expected or LCD_BLON or LCD_DATA_expected or LCD_DATA or LCD_EN_expected or LCD_EN or LCD_ON_expected or LCD_ON or LCD_RS_expected or LCD_RS or LCD_RW_expected or LCD_RW or display1_expected or display1 or display2_expected or display2 or teste2_expected or teste2 or testeEstado_expected or testeEstado)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected HEX0 = %b | expected LCD_BLON = %b | expected LCD_DATA = %b | expected LCD_EN = %b | expected LCD_ON = %b | expected LCD_RS = %b | expected LCD_RW = %b | expected display1 = %b | expected display2 = %b | expected teste2 = %b | expected testeEstado = %b | ",HEX0_expected_prev,LCD_BLON_expected_prev,LCD_DATA_expected_prev,LCD_EN_expected_prev,LCD_ON_expected_prev,LCD_RS_expected_prev,LCD_RW_expected_prev,display1_expected_prev,display2_expected_prev,teste2_expected_prev,testeEstado_expected_prev);
	$display("| real HEX0 = %b | real LCD_BLON = %b | real LCD_DATA = %b | real LCD_EN = %b | real LCD_ON = %b | real LCD_RS = %b | real LCD_RW = %b | real display1 = %b | real display2 = %b | real teste2 = %b | real testeEstado = %b | ",HEX0_prev,LCD_BLON_prev,LCD_DATA_prev,LCD_EN_prev,LCD_ON_prev,LCD_RS_prev,LCD_RW_prev,display1_prev,display2_prev,teste2_prev,testeEstado_prev);
`endif
	if (
		( teste2_expected_prev[0] !== 1'bx ) && ( teste2_prev[0] !== teste2_expected_prev[0] )
		&& ((teste2_expected_prev[0] !== last_teste2_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste2_expected_prev);
		$display ("     Real value = %b", teste2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_teste2_exp[0] = teste2_expected_prev[0];
	end
	if (
		( teste2_expected_prev[1] !== 1'bx ) && ( teste2_prev[1] !== teste2_expected_prev[1] )
		&& ((teste2_expected_prev[1] !== last_teste2_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste2_expected_prev);
		$display ("     Real value = %b", teste2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_teste2_exp[1] = teste2_expected_prev[1];
	end
	if (
		( teste2_expected_prev[2] !== 1'bx ) && ( teste2_prev[2] !== teste2_expected_prev[2] )
		&& ((teste2_expected_prev[2] !== last_teste2_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste2_expected_prev);
		$display ("     Real value = %b", teste2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_teste2_exp[2] = teste2_expected_prev[2];
	end
	if (
		( testeEstado_expected_prev[0] !== 1'bx ) && ( testeEstado_prev[0] !== testeEstado_expected_prev[0] )
		&& ((testeEstado_expected_prev[0] !== last_testeEstado_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeEstado[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeEstado_expected_prev);
		$display ("     Real value = %b", testeEstado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_testeEstado_exp[0] = testeEstado_expected_prev[0];
	end
	if (
		( testeEstado_expected_prev[1] !== 1'bx ) && ( testeEstado_prev[1] !== testeEstado_expected_prev[1] )
		&& ((testeEstado_expected_prev[1] !== last_testeEstado_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeEstado[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeEstado_expected_prev);
		$display ("     Real value = %b", testeEstado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_testeEstado_exp[1] = testeEstado_expected_prev[1];
	end
	if (
		( testeEstado_expected_prev[2] !== 1'bx ) && ( testeEstado_prev[2] !== testeEstado_expected_prev[2] )
		&& ((testeEstado_expected_prev[2] !== last_testeEstado_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeEstado[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeEstado_expected_prev);
		$display ("     Real value = %b", testeEstado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_testeEstado_exp[2] = testeEstado_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module urna_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] treg_LCD_DATA;
reg clock;
reg finalizar;
reg key0;
reg key1;
reg key2;
reg reset;
// wires                                               
wire [6:0] HEX0;
wire LCD_BLON;
wire [7:0] LCD_DATA;
wire LCD_EN;
wire LCD_ON;
wire LCD_RS;
wire LCD_RW;
wire [6:0] display1;
wire [6:0] display2;
wire [2:0] teste2;
wire [2:0] testeEstado;

wire sampler;                             

// assign statements (if any)                          
assign LCD_DATA = treg_LCD_DATA;
urna i1 (
// port map - connection between master ports and signals/registers   
	.HEX0(HEX0),
	.LCD_BLON(LCD_BLON),
	.LCD_DATA(LCD_DATA),
	.LCD_EN(LCD_EN),
	.LCD_ON(LCD_ON),
	.LCD_RS(LCD_RS),
	.LCD_RW(LCD_RW),
	.clock(clock),
	.display1(display1),
	.display2(display2),
	.finalizar(finalizar),
	.key0(key0),
	.key1(key1),
	.key2(key2),
	.reset(reset),
	.teste2(teste2),
	.testeEstado(testeEstado)
);

// clock
always
begin
	clock = 1'b0;
	clock = #5000 1'b1;
	#5000;
end 

// key0
always
begin
	key0 = 1'b0;
	key0 = #20000 1'b1;
	#20000;
end 

urna_vlg_sample_tst tb_sample (
	.LCD_DATA(LCD_DATA),
	.clock(clock),
	.finalizar(finalizar),
	.key0(key0),
	.key1(key1),
	.key2(key2),
	.reset(reset),
	.sampler_tx(sampler)
);

urna_vlg_check_tst tb_out(
	.HEX0(HEX0),
	.LCD_BLON(LCD_BLON),
	.LCD_DATA(LCD_DATA),
	.LCD_EN(LCD_EN),
	.LCD_ON(LCD_ON),
	.LCD_RS(LCD_RS),
	.LCD_RW(LCD_RW),
	.display1(display1),
	.display2(display2),
	.teste2(teste2),
	.testeEstado(testeEstado),
	.sampler_rx(sampler)
);
endmodule

